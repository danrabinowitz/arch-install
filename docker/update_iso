#!/bin/bash
set -euo pipefail
# set -x

if [ ! -f /.dockerenv ]; then
  echo "Please run this from the docker container"
  exit 1
fi

VOLUME_LINE=`isoinfo -d -i "/src.iso" | grep -i "Volume id:"`
VOLUME_NAME=${VOLUME_LINE:11}
echo "Volume name: $VOLUME_NAME"


mkdir -p /mnt/linux
mount -o loop /src.iso /mnt/linux

MODIFY_AIROOTFS=0
if [ $MODIFY_AIROOTFS -ne 0 ]; then
  # Open airoot
  cd /mnt/linux/arch/x86_64
  unsquashfs -d /mnt/airootfs airootfs.sfs
  echo 'echo "Dan was here"' >> /mnt/airootfs/root/.zlogin
  echo 'echo "Dan was here2" > /tmp/dan_was_here.log' >> /mnt/airootfs/root/.zlogin
  echo '/run/archiso/bootmnt/custom_files/install/usr/local/sbin/custom-init1' >> /mnt/airootfs/root/.zlogin
  echo 'echo "Dan was here3" > /tmp/dan_was_here.log' >> /mnt/airootfs/root/.zlogin
fi

# Since the ISO is read-only we will need to copy the contents into another
# directory that we can modify and add what we want.
tmp_dir=$(mktemp -d)
cd /mnt/linux
tar -cf - . | (cd "$tmp_dir" && tar -xf - )

if [ $MODIFY_AIROOTFS -ne 0 ]; then
  COMPRESS=""
  # COMPRESS=" -comp xz"
  mksquashfs "$COMPRESS" /mnt/airootfs "${tmp_dir}/arch/x86_64/airootfs.sfs"
  md5sum "${tmp_dir}/arch/x86_64/airootfs.sfs" > "${tmp_dir}/arch/x86_64/airootfs.md5"
fi

cd /work
umount /mnt/linux

custom_files_dir="${tmp_dir}/custom_files"
mkdir -p "$custom_files_dir"
echo "Adding our files to the copy of the ISO..."
(cd "/work/files/" && cp -va install post-install "${custom_files_dir}")

echo "Creating new ISO..."
cd "$tmp_dir"

# https://wiki.archlinux.org/index.php/Remastering_the_Install_ISO
xorriso -as mkisofs \
  -iso-level 3 \
  -full-iso9660-filenames \
  -volid "$VOLUME_NAME" \
  -eltorito-boot isolinux/isolinux.bin \
  -eltorito-catalog isolinux/boot.cat \
  -no-emul-boot -boot-load-size 4 -boot-info-table \
  -isohybrid-mbr "$tmp_dir"/isolinux/isohdpfx.bin \
  -eltorito-alt-boot \
  -e EFI/archiso/efiboot.img \
  -no-emul-boot -isohybrid-gpt-basdat \
  -output /dst.iso \
  "$tmp_dir"
